import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  ScrollView,
  TouchableOpacity,
  TextInput,
  Modal,
  StyleSheet,
  StatusBar,
  SafeAreaView,
  Alert,
  Dimensions,
  FlatList,
} from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import Icon from 'react-native-vector-icons/MaterialIcons';
import FontAwesome from 'react-native-vector-icons/FontAwesome';

const { width, height } = Dimensions.get('window');

const TexPortApp = () => {
  const [currentTab, setCurrentTab] = useState('payments');
  const [modalVisible, setModalVisible] = useState(false);
  const [modalContent, setModalContent] = useState(null);
  const [isVoiceRecording, setIsVoiceRecording] = useState(false);
  const [voiceText, setVoiceText] = useState('üéß Listening for voice command...');

  // Sample data
  const transactions = [
    {
      id: 1,
      company: 'Rajesh Cotton Mills',
      invoice: 'TX-2024-156',
      date: 'Jan 20',
      amount: 45000,
      status: 'paid',
      paymentMethod: 'UPI Payment'
    },
    {
      id: 2,
      company: 'Mumbai Silk House',
      invoice: 'TX-2024-142',
      date: 'Jan 15',
      amount: 78500,
      status: 'overdue',
      overdueDays: 5,
      penalty: 1570
    },
    {
      id: 3,
      company: 'Gujarat Textiles Ltd',
      invoice: 'TX-2024-138',
      date: 'Jan 25',
      amount: 125000,
      status: 'pending',
      dueInDays: 5
    }
  ];

  const parties = [
    {
      id: 'PTY-001',
      name: 'Rajesh Cotton Mills',
      location: 'Gujarat',
      gst: '24ABCDE1234F1Z5',
      outstanding: 245000,
      status: 'Active'
    },
    {
      id: 'PTY-002',
      name: 'Mumbai Silk House',
      location: 'Maharashtra',
      gst: '27FGHIJ5678K2L9',
      outstanding: 78500,
      status: 'Alert'
    },
    {
      id: 'PTY-003',
      name: 'Delhi Fashion Hub',
      location: 'Delhi',
      gst: '07MNOPQ9012R3S4',
      outstanding: 156000,
      status: 'Premium'
    }
  ];

  const staff = [
    {
      id: 1,
      name: 'Ramesh Kumar',
      role: 'Machine Operator',
      machine: 'M-001',
      hoursToday: 8.5,
      hourlyRate: 100,
      status: 'present'
    },
    {
      id: 2,
      name: 'Suresh Patel',
      role: 'Machine Operator',
      machine: 'M-002',
      hoursToday: 7.2,
      hourlyRate: 100,
      status: 'present'
    },
    {
      id: 3,
      name: 'Vikash Singh',
      role: 'Machine Operator',
      machine: 'M-003',
      hoursToday: 0,
      hourlyRate: 100,
      status: 'absent'
    },
    {
      id: 4,
      name: 'Rajesh Sharma',
      role: 'Meter Calculator',
      metersToday: 2450,
      meterRate: 0.5,
      status: 'present'
    },
    {
      id: 5,
      name: 'Amit Gupta',
      role: 'Meter Calculator',
      metersToday: 1890,
      meterRate: 0.5,
      status: 'present'
    }
  ];

  const showModal = (content) => {
    setModalContent(content);
    setModalVisible(true);
  };

  const hideModal = () => {
    setModalVisible(false);
    setModalContent(null);
  };

  const startVoiceCommand = () => {
    if (!isVoiceRecording) {
      setIsVoiceRecording(true);
      setVoiceText('üéß Listening for voice command...');
      
      const content = (
        <VoiceCommandModal 
          voiceText={voiceText}
          onStop={() => {
            setIsVoiceRecording(false);
            hideModal();
          }}
          onProcess={() => processVoiceCommand()}
        />
      );
      showModal(content);
      
      // Simulate voice recognition
      setTimeout(() => {
        setVoiceText('üó£Ô∏è "100 meter cotton record kar do"');
      }, 2500);
    }
  };

  const processVoiceCommand = () => {
    const content = (
      <VoiceOrderConfirmation onClose={hideModal} />
    );
    showModal(content);
    setIsVoiceRecording(false);
  };

  const showAIPredictions = () => {
    const content = <AIPredictionsModal onClose={hideModal} />;
    showModal(content);
  };

  const showDuePayments = () => {
    const content = <DuePaymentsModal onClose={hideModal} />;
    showModal(content);
  };

  const sendPaymentReminder = () => {
    const content = <PaymentReminderModal onClose={hideModal} />;
    showModal(content);
  };

  const addNewParty = () => {
    const content = <AddPartyModal onClose={hideModal} />;
    showModal(content);
  };

  const showBillSorting = () => {
    const content = <BillSortingModal onClose={hideModal} />;
    showModal(content);
  };

  const createYearlyGSTFile = () => {
    const content = <GSTFileModal onClose={hideModal} />;
    showModal(content);
  };

  const bookTransporter = () => {
    const content = <TransporterBookingModal onClose={hideModal} />;
    showModal(content);
  };

  const markAttendance = () => {
    const content = <AttendanceModal staff={staff} onClose={hideModal} />;
    showModal(content);
  };

  const renderHeader = () => (
    <LinearGradient
      colors={['#667eea', '#764ba2']}
      style={styles.header}
    >
      <View style={styles.headerTop}>
        <View>
          <Text style={styles.headerTitle}>TexPort</Text>
          <Text style={styles.headerSubtitle}>Digital Textile Bazaar</Text>
        </View>
        <View style={styles.headerRight}>
          <TouchableOpacity onPress={() => Alert.alert('Notifications', '12 new notifications')}>
            <Icon name="notifications" size={24} color="white" />
            <View style={styles.notificationDot} />
          </TouchableOpacity>
          <View style={styles.avatar}>
            <Text style={styles.avatarText}>T</Text>
          </View>
        </View>
      </View>

      <View style={styles.quickActions}>
        <TouchableOpacity style={styles.voiceButton} onPress={startVoiceCommand}>
          <Icon name="mic" size={32} color="white" />
          <Text style={styles.quickActionText}>Voice Order</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.aiButton} onPress={showAIPredictions}>
          <Text style={styles.aiEmoji}>ü§ñ</Text>
          <Text style={styles.quickActionText}>AI Trends</Text>
        </TouchableOpacity>
      </View>

      <View style={styles.statsContainer}>
        <View style={styles.statCard}>
          <Text style={styles.statValue}>‚Çπ2.4L</Text>
          <Text style={styles.statLabel}>Due Amount</Text>
        </View>
        <View style={styles.statCard}>
          <Text style={styles.statValue}>156</Text>
          <Text style={styles.statLabel}>Total Parties</Text>
        </View>
        <View style={styles.statCard}>
          <Text style={styles.statValue}>14</Text>
          <Text style={styles.statLabel}>Machines</Text>
        </View>
      </View>
    </LinearGradient>
  );

  const renderTabBar = () => (
    <View style={styles.tabBar}>
      {[
        { key: 'payments', label: 'üí∞ Payments' },
        { key: 'parties', label: 'üë• Parties' },
        { key: 'gst', label: 'üìã GST' },
        { key: 'staff', label: 'üë®‚Äçüíº Staff' },
        { key: 'more', label: '‚ö° More' }
      ].map((tab) => (
        <TouchableOpacity
          key={tab.key}
          style={[
            styles.tabButton,
            currentTab === tab.key && styles.activeTab
          ]}
          onPress={() => setCurrentTab(tab.key)}
        >
          <Text style={[
            styles.tabText,
            currentTab === tab.key && styles.activeTabText
          ]}>
            {tab.label}
          </Text>
        </TouchableOpacity>
      ))}
    </View>
  );

  const renderPaymentsTab = () => (
    <ScrollView style={styles.tabContent}>
      {/* Due Payment Alert */}
      <LinearGradient
        colors={['#ef4444', '#ec4899']}
        style={styles.alertCard}
      >
        <View style={styles.alertHeader}>
          <Text style={styles.alertTitle}>‚ö†Ô∏è Payment Alerts</Text>
          <View style={styles.alertBadge}>
            <Text style={styles.alertBadgeText}>12 Due</Text>
          </View>
        </View>
        <Text style={styles.alertSubtext}>Total overdue: ‚Çπ2,45,000 + ‚Çπ12,500 penalty</Text>
        <TouchableOpacity style={styles.alertButton} onPress={showDuePayments}>
          <Text style={styles.alertButtonText}>View All Due Payments</Text>
        </TouchableOpacity>
      </LinearGradient>

      {/* Bill Sorting */}
      <View style={styles.sectionHeader}>
        <Text style={styles.sectionTitle}>Recent Transactions</Text>
        <TouchableOpacity style={styles.sortButton} onPress={showBillSorting}>
          <Text style={styles.sortButtonText}>üìä Sort Bills</Text>
        </TouchableOpacity>
      </View>

      {/* Transaction List */}
      {transactions.map((transaction) => (
        <TransactionCard
          key={transaction.id}
          transaction={transaction}
          onPaymentReminder={sendPaymentReminder}
        />
      ))}
    </ScrollView>
  );

  const renderPartiesTab = () => (
    <ScrollView style={styles.tabContent}>
      <View style={styles.sectionHeader}>
        <Text style={styles.sectionTitle}>Party Management</Text>
        <TouchableOpacity style={styles.addButton} onPress={addNewParty}>
          <Text style={styles.addButtonText}>+ Add Party</Text>
        </TouchableOpacity>
      </View>

      {/* Search Bar */}
      <View style={styles.searchContainer}>
        <Icon name="search" size={20} color="#9CA3AF" style={styles.searchIcon} />
        <TextInput
          style={styles.searchInput}
          placeholder="Search parties by name or GST..."
          placeholderTextColor="#9CA3AF"
        />
      </View>

      {/* Party List */}
      {parties.map((party) => (
        <PartyCard key={party.id} party={party} />
      ))}
    </ScrollView>
  );

  const renderGSTTab = () => (
    <ScrollView style={styles.tabContent}>
      <View style={styles.sectionHeader}>
        <Text style={styles.sectionTitle}>GST Management</Text>
        <TouchableOpacity style={styles.gstButton} onPress={createYearlyGSTFile}>
          <Text style={styles.gstButtonText}>üìÑ Yearly File</Text>
        </TouchableOpacity>
      </View>

      {/* GST Search */}
      <View style={styles.gstSearchContainer}>
        <TextInput
          style={styles.gstSearchInput}
          placeholder="Enter GST Number (e.g., 24ABCDE1234F1Z5)"
          placeholderTextColor="#9CA3AF"
        />
        <TouchableOpacity style={styles.gstSearchButton}>
          <Text style={styles.gstSearchButtonText}>üîç Search</Text>
        </TouchableOpacity>
      </View>

      {/* GST Quick Actions */}
      <View style={styles.gstActionsContainer}>
        <TouchableOpacity style={styles.gstActionCard}>
          <Text style={styles.gstActionEmoji}>üì§</Text>
          <Text style={styles.gstActionTitle}>E-Invoice Upload</Text>
          <Text style={styles.gstActionSubtitle}>Upload to GST Portal</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.gstActionCard}>
          <Text style={styles.gstActionEmoji}>üìä</Text>
          <Text style={styles.gstActionTitle}>GST Reports</Text>
          <Text style={styles.gstActionSubtitle}>View Analytics</Text>
        </TouchableOpacity>
      </View>

      {/* GST Status Cards */}
      <GSTStatusCard
        title="GSTR-1 Filing"
        period="December 2023"
        status="Filed"
        statusColor="#10B981"
        details="Filed on: Jan 10, 2024 ‚Ä¢ 1,247 invoices"
      />
      <GSTStatusCard
        title="GSTR-3B Return"
        period="January 2024"
        status="Due Soon"
        statusColor="#F59E0B"
        details="Due: Jan 20, 2024 ‚Ä¢ Tax liability: ‚Çπ45,600"
        showButton={true}
        buttonText="File Now"
      />
      <GSTStatusCard
        title="Input Tax Credit"
        period="Available ITC"
        amount="‚Çπ1,23,450"
        details="This Month"
        showButton={true}
        buttonText="View Details"
      />
    </ScrollView>
  );

  const renderStaffTab = () => (
    <ScrollView style={styles.tabContent}>
      <View style={styles.sectionHeader}>
        <Text style={styles.sectionTitle}>Staff Management</Text>
        <TouchableOpacity style={styles.attendanceButton} onPress={markAttendance}>
          <Text style={styles.attendanceButtonText}>‚úì Attendance</Text>
        </TouchableOpacity>
      </View>

      {/* Today's Summary */}
      <LinearGradient
        colors={['#3B82F6', '#6366F1']}
        style={styles.summaryCard}
      >
        <Text style={styles.summaryTitle}>üìÖ Today's Summary</Text>
        <View style={styles.summaryStats}>
          <View style={styles.summaryStatItem}>
            <Text style={styles.summaryStatValue}>18</Text>
            <Text style={styles.summaryStatLabel}>Present</Text>
          </View>
          <View style={styles.summaryStatItem}>
            <Text style={styles.summaryStatValue}>3</Text>
            <Text style={styles.summaryStatLabel}>Absent</Text>
          </View>
          <View style={styles.summaryStatItem}>
            <Text style={styles.summaryStatValue}>3</Text>
            <Text style={styles.summaryStatLabel}>Late</Text>
          </View>
        </View>
      </LinearGradient>

      {/* Machine Operators */}
      <Text style={styles.subsectionTitle}>üè≠ Machine Operators (14 Machines)</Text>
      {staff.filter(s => s.role === 'Machine Operator').map((worker) => (
        <StaffCard key={worker.id} worker={worker} />
      ))}
      
      <TouchableOpacity style={styles.viewAllButton}>
        <Text style={styles.viewAllButtonText}>View All 14 Machine Operators</Text>
      </TouchableOpacity>

      {/* Meter Calculation Staff */}
      <Text style={styles.subsectionTitle}>üìè Meter Calculation Staff</Text>
      {staff.filter(s => s.role === 'Meter Calculator').map((worker) => (
        <StaffCard key={worker.id} worker={worker} />
      ))}
    </ScrollView>
  );

  const renderMoreTab = () => (
    <ScrollView style={styles.tabContent}>
      <Text style={styles.sectionTitle}>‚ö° Additional Features</Text>
      
      {/* Yaan & Transportation */}
      <View style={styles.moreCard}>
        <Text style={styles.moreCardTitle}>üöõ Yaan & Transportation</Text>
        <View style={styles.moreCardContent}>
          <MoreFeatureItem
            title="Purchase Reminders"
            subtitle="5 pending reminders"
            buttonText="View"
            buttonColor="#F59E0B"
          />
          <MoreFeatureItem
            title="Book Transporter"
            subtitle="Truck booking plugin"
            buttonText="Book"
            buttonColor="#10B981"
            onPress={bookTransporter}
          />
          <MoreFeatureItem
            title="Other Costs"
            subtitle="Monthly expenses"
            buttonText="‚Çπ45,600"
            buttonColor="#3B82F6"
          />
        </View>
      </View>

      {/* AI Features */}
      <LinearGradient
        colors={['#8B5CF6', '#EC4899', '#EF4444']}
        style={styles.aiCard}
      >
        <Text style={styles.aiCardTitle}>ü§ñ AI-Powered Features</Text>
        <TouchableOpacity style={styles.aiFeatureButton} onPress={showAIPredictions}>
          <Text style={styles.aiFeatureTitle}>Fabric Demand Prediction</Text>
          <Text style={styles.aiFeatureSubtitle}>Cotton demand ‚Üó 15% this month in your region</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.aiFeatureButton}>
          <Text style={styles.aiFeatureTitle}>Regional Market Trends</Text>
          <Text style={styles.aiFeatureSubtitle}>Silk trending in Mumbai ‚Ä¢ Polyester stable</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.aiFeatureButton}>
          <Text style={styles.aiFeatureTitle}>Price Optimization</Text>
          <Text style={styles.aiFeatureSubtitle}>AI suggests optimal pricing for maximum profit</Text>
        </TouchableOpacity>
      </LinearGradient>

      {/* Quick Tools Grid */}
      <View style={styles.toolsGrid}>
        <ToolCard icon="üìä" title="Bill Sorting" subtitle="Asc/Desc Order" onPress={showBillSorting} />
        <ToolCard icon="üßÆ" title="Calculator" subtitle="Quick Math" />
        <ToolCard icon="üìà" title="Analytics" subtitle="Business Reports" />
        <ToolCard icon="‚öôÔ∏è" title="Settings" subtitle="App Config" />
      </View>
    </ScrollView>
  );

  const renderTabContent = () => {
    switch (currentTab) {
      case 'payments':
        return renderPaymentsTab();
      case 'parties':
        return renderPartiesTab();
      case 'gst':
        return renderGSTTab();
      case 'staff':
        return renderStaffTab();
      case 'more':
        return renderMoreTab();
      default:
        return renderPaymentsTab();
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="light-content" backgroundColor="#667eea" />
      
      {renderHeader()}
      {renderTabBar()}
      
      <View style={styles.content}>
        {renderTabContent()}
      </View>

      {/* Floating Voice Button */}
      <TouchableOpacity style={styles.floatingVoiceButton} onPress={startVoiceCommand}>
        <LinearGradient
          colors={['#EF4444', '#EC4899']}
          style={styles.floatingVoiceGradient}
        >
          <Icon name="mic" size={32} color="white" />
        </LinearGradient>
      </TouchableOpacity>

      {/* Modal */}
      <Modal
        animationType="slide"
        transparent={true}
        visible={modalVisible}
        onRequestClose={hideModal}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            {modalContent}
          </View>
        </View>
      </Modal>
    </SafeAreaView>
  );
};

// Component definitions for cards and modals
const TransactionCard = ({ transaction, onPaymentReminder }) => {
  const getStatusColor = (status) => {
    switch (status) {
      case 'paid': return '#10B981';
      case 'overdue': return '#EF4444';
      case 'pending': return '#F59E0B';
      default: return '#6B7280';
    }
  };

  const getStatusText = (transaction) => {
    switch (transaction.status) {
      case 'paid': return '‚úì Paid';
      case 'overdue': return `‚è∞ ${transaction.overdueDays} days overdue`;
      case 'pending': return '‚è≥ Pending';
      default: return '';
    }
  };

  return (
    <View style={[styles.transactionCard, { borderLeftColor: getStatusColor(transaction.status) }]}>
      <View style={styles.transactionHeader}>
        <View>
          <Text style={styles.transactionCompany}>{transaction.company}</Text>
          <Text style={styles.transactionDetails}>Invoice #{transaction.invoice} ‚Ä¢ {transaction.date}</Text>
        </View>
        <View style={styles.transactionRight}>
          <Text style={[styles.transactionAmount, { color: getStatusColor(transaction.status) }]}>
            ‚Çπ{transaction.amount.toLocaleString()}
          </Text>
          <View style={[styles.statusBadge, { backgroundColor: getStatusColor(transaction.status) + '20' }]}>
            <Text style={[styles.statusBadgeText, { color: getStatusColor(transaction.status) }]}>
              {getStatusText(transaction)}
            </Text>
          </View>
        </View>
      </View>
      <View style={styles.transactionFooter}>
        <Text style={styles.transactionPaymentMethod}>
          {transaction.status === 'overdue' ? `Penalty: +‚Çπ${transaction.penalty}` : transaction.paymentMethod}
        </Text>
        {transaction.status === 'overdue' && (
          <TouchableOpacity style={styles.reminderButton} onPress={onPaymentReminder}>
            <Text style={styles.reminderButtonText}>Send Reminder</Text>
          </TouchableOpacity>
        )}
        {transaction.status === 'pending' && (
          <TouchableOpacity style={styles.payButton}>
            <Text style={styles.payButtonText}>Pay Now</Text>
          </TouchableOpacity>
        )}
        {transaction.status === 'paid' && (
          <TouchableOpacity>
            <Text style={styles.viewProofText}>View Proof</Text>
          </TouchableOpacity>
        )}
      </View>
    </View>
  );
};

const PartyCard = ({ party }) => {
  const getStatusColor = (status) => {
    switch (status) {
      case 'Active': return '#10B981';
      case 'Alert': return '#EF4444';
      case 'Premium': return '#3B82F6';
      default: return '#6B7280';
    }
  };

  return (
    <View style={styles.partyCard}>
      <View style={styles.partyHeader}>
        <View>
          <Text style={styles.partyName}>{party.name}</Text>
          <Text style={styles.partyDetails}>ID: {party.id} ‚Ä¢ {party.location}</Text>
          <Text style={styles.partyGST}>GST: {party.gst}</Text>
        </View>
        <View style={styles.partyRight}>
          <Text style={styles.partyAmount}>‚Çπ{party.outstanding.toLocaleString()}</Text>
          <Text style={styles.partyAmountLabel}>Outstanding</Text>
          <View style={[styles.partyStatusBadge, { backgroundColor: getStatusColor(party.status) + '20' }]}>
            <Text style={[styles.partyStatusText, { color: getStatusColor(party.status) }]}>
              {party.status}
            </Text>
          </View>
        </View>
      </View>
      <View style={styles.partyActions}>
        <TouchableOpacity style={styles.partyActionButton}>
          <Text style={styles.partyActionButtonText}>View Details</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.partyContactButton}>
          <Text style={styles.partyContactButtonText}>üìû</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.partyContactButton}>
          <Text style={styles.partyContactButtonText}>üí¨</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};

const StaffCard = ({ worker }) => {
  const getStatusColor = (status) => {
    switch (status) {
      case 'present': return '#10B981';
      case 'absent': return '#EF4444';
      default: return '#6B7280';
    }
  };

  const calculateEarnings = (worker) => {
    if (worker.role === 'Machine Operator') {
      return worker.hoursToday * worker.hourlyRate;
    } else {
      return worker.metersToday * worker.meterRate;
    }
  };

  const getWorkDetails = (worker) => {
    if (worker.role === 'Machine Operator') {
      return worker.status === 'absent' 
        ? `Machine #${worker.machine} ‚Ä¢ Absent today`
        : `Machine #${worker.machine} ‚Ä¢ ${worker.hoursToday} hrs today`;
    } else {
      return `${worker.metersToday} meters calculated today`;
    }
  };

  const getRateDetails = (worker) => {
    if (worker.role === 'Machine Operator') {
      return worker.status === 'absent' ? 'No work' : `@‚Çπ${worker.hourlyRate}/hr`;
    } else {
      return `@‚Çπ${worker.meterRate}/meter`;
    }
  };

  return (
    <View style={styles.staffCard}>
      <View style={styles.staffHeader}>
        <View>
          <Text style={styles.staffName}>{worker.name}</Text>
          <Text style={styles.staffDetails}>{getWorkDetails(worker)}</Text>
        </View>
        <View style={styles.staffRight}>
          <Text style={[styles.staffEarnings, { color: worker.status === 'absent' ? '#EF4444' : '#10B981' }]}>
            ‚Çπ{calculateEarnings(worker)}
          </Text>
          <Text style={styles.staffRate}>{getRateDetails(worker)}</Text>
        </View>
      </View>
      <View style={styles.staffFooter}>
        <View style={[styles.staffStatusBadge, { backgroundColor: getStatusColor(worker.status) + '20' }]}>
          <Text style={[styles.staffStatusText, { color: getStatusColor(worker.status) }]}>
            {worker.status === 'present' ? '‚úì Present' : '‚úó Absent'}
          </Text>
        </View>
        <TouchableOpacity>
          <Text style={styles.viewDetailsText}>View Details</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};

const GSTStatusCard = ({ title, period, status, statusColor, details, amount, showButton, buttonText }) => (
  <View style={styles.gstStatusCard}>
    <View style={styles.gstStatusHeader}>
      <View>
        <Text style={styles.gstStatusTitle}>{title}</Text>
        <Text style={styles.gstStatusPeriod}>{period}</Text>
      </View>
      {amount ? (
        <View style={styles.gstStatusRight}>
          <Text style={styles.gstStatusAmount}>{amount}</Text>
          <Text style={styles.gstStatusAmountLabel}>{details}</Text>
        </View>
      ) : (
        <View style={[styles.gstStatusBadge, { backgroundColor: statusColor + '20' }]}>
          <Text style={[styles.gstStatusBadgeText, { color: statusColor }]}>{status}</Text>
        </View>
      )}
    </View>
    <Text style={styles.gstStatusDetails}>{details}</Text>
    {showButton && (
      <TouchableOpacity style={[styles.gstStatusButton, { backgroundColor: statusColor }]}>
        <Text style={styles.gstStatusButtonText}>{buttonText}</Text>
      </TouchableOpacity>
    )}
  </View>
);

const MoreFeatureItem = ({ title, subtitle, buttonText, buttonColor, onPress }) => (
  <View style={styles.moreFeatureItem}>
    <View>
      <Text style={styles.moreFeatureTitle}>{title}</Text>
      <Text style={styles.moreFeatureSubtitle}>{subtitle}</Text>
    </View>
    <TouchableOpacity 
      style={[styles.moreFeatureButton, { backgroundColor: buttonColor }]}
      onPress={onPress}
    >
      <Text style={styles.moreFeatureButtonText}>{buttonText}</Text>
    </TouchableOpacity>
  </View>
);

const ToolCard = ({ icon, title, subtitle, onPress }) => (
  <TouchableOpacity style={styles.toolCard} onPress={onPress}>
    <Text style={styles.toolIcon}>{icon}</Text>
    <Text style={styles.toolTitle}>{title}</Text>
    <Text style={styles.toolSubtitle}>{subtitle}</Text>
  </TouchableOpacity>
);

// Modal Components
const VoiceCommandModal = ({ voiceText, onStop, onProcess }) => (
  <View style={styles.modalContainer}>
    <View style={styles.voiceRecordingIndicator}>
      <LinearGradient
        colors={['#EF4444', '#EC4899']}
        style={styles.voiceRecordingCircle}
      >
        <Icon name="mic" size={48} color="white" />
      </LinearGradient>
    </View>
    <Text style={styles.modalTitle}>üé§ Voice Command Active</Text>
    <Text style={styles.modalSubtitle}>
      Say something like:{'\n'}<Text style={styles.boldText}>"100 meter cotton record kar do"</Text>
    </Text>
    <View style={styles.voiceTextContainer}>
      <Text style={styles.voiceText}>{voiceText}</Text>
    </View>
    <View style={styles.modalButtons}>
      <TouchableOpacity style={styles.stopButton} onPress={onStop}>
        <Text style={styles.stopButtonText}>Stop Recording</Text>
      </TouchableOpacity>
      <TouchableOpacity style={styles.processButton} onPress={onProcess}>
        <Text style={styles.processButtonText}>Process Order</Text>
      </TouchableOpacity>
    </View>
  </View>
);

const VoiceOrderConfirmation = ({ onClose }) => (
  <View style={styles.modalContainer}>
    <View style={styles.successIndicator}>
      <Icon name="check-circle" size={80} color="#10B981" />
    </View>
    <Text style={styles.modalTitle}>‚úÖ Voice Order Recorded!</Text>
    <View style={styles.orderDetails}>
      <View style={styles.orderDetailRow}>
        <Text style={styles.orderDetailLabel}>Item:</Text>
        <Text style={styles.orderDetailValue}>Cotton Fabric</Text>
      </View>
      <View style={styles.orderDetailRow}>
        <Text style={styles.orderDetailLabel}>Quantity:</Text>
        <Text style={styles.orderDetailValue}>100 meters</Text>
      </View>
      <View style={styles.orderDetailRow}>
        <Text style={styles.orderDetailLabel}>Order ID:</Text>
        <Text style={styles.orderDetailValueHighlight}>VO-2024-001</Text>
      </View>
      <View style={styles.orderDetailRow}>
        <Text style={styles.orderDetailLabel}>Time:</Text>
        <Text style={styles.orderDetailValue}>{new Date().toLocaleTimeString()}</Text>
      </View>
    </View>
    <TouchableOpacity style={styles.confirmButton} onPress={onClose}>
      <Text style={styles.confirmButtonText}>Perfect! Order Saved</Text>
    </TouchableOpacity>
  </View>
);

const AIPredictionsModal = ({ onClose }) => (
  <View style={styles.modalContainer}>
    <Text style={styles.modalTitle}>ü§ñ AI Fabric Market Predictions</Text>
    <ScrollView style={styles.predictionsContainer}>
      <LinearGradient colors={['#10B981', '#059669']} style={styles.predictionCard}>
        <View style={styles.predictionHeader}>
          <Text style={styles.predictionTitle}>Cotton Demand</Text>
          <View style={styles.predictionBadge}>
            <Text style={styles.predictionBadgeText}>‚Üó +15%</Text>
          </View>
        </View>
        <Text style={styles.predictionText}>Expected surge in Mumbai region this month</Text>
        <Text style={styles.predictionRecommendation}>üí° Recommendation: Stock up on premium cotton varieties</Text>
      </LinearGradient>
      
      <LinearGradient colors={['#3B82F6', '#6366F1']} style={styles.predictionCard}>
        <View style={styles.predictionHeader}>
          <Text style={styles.predictionTitle}>Silk Market</Text>
          <View style={styles.predictionBadge}>
            <Text style={styles.predictionBadgeText}>‚Üó Rising</Text>
          </View>
        </View>
        <Text style={styles.predictionText}>Wedding season driving premium silk demand</Text>
        <Text style={styles.predictionRecommendation}>üí° Recommendation: Focus on high-quality silk varieties</Text>
      </LinearGradient>
      
      <LinearGradient colors={['#F59E0B', '#F97316']} style={styles.predictionCard}>
        <View style={styles.predictionHeader}>
          <Text style={styles.predictionTitle}>Polyester Trends</Text>
          <View style={styles.predictionBadge}>
            <Text style={styles.predictionBadgeText}>‚Üí Stable</Text>
          </View>
        </View>
        <Text style={styles.predictionText}>Consistent demand across all regions</Text>
        <Text style={styles.predictionRecommendation}>üí° Recommendation: Good time for bulk purchases</Text>
      </LinearGradient>
    </ScrollView>
    <TouchableOpacity style={styles.gotItButton} onPress={onClose}>
      <Text style={styles.gotItButtonText}>Got It!</Text>
    </TouchableOpacity>
  </View>
);

const DuePaymentsModal = ({ onClose }) => (
  <View style={styles.modalContainer}>
    <Text style={styles.modalTitle}>‚ö†Ô∏è Due Payment Panel</Text>
    <ScrollView style={styles.duePaymentsContainer}>
      <LinearGradient colors={['#EF4444', '#EC4899']} style={styles.duePaymentCard}>
        <View style={styles.duePaymentHeader}>
          <View>
            <Text style={styles.duePaymentCompany}>Mumbai Silk House</Text>
            <Text style={styles.duePaymentOverdue}>5 days overdue</Text>
          </View>
          <View style={styles.duePaymentRight}>
            <Text style={styles.duePaymentAmount}>‚Çπ78,500</Text>
            <Text style={styles.duePaymentPenalty}>+‚Çπ1,570 penalty</Text>
          </View>
        </View>
        <TouchableOpacity style={styles.sendReminderButton}>
          <Text style={styles.sendReminderButtonText}>üì± Send Reminder</Text>
        </TouchableOpacity>
      </LinearGradient>
      
      <LinearGradient colors={['#F97316', '#EF4444']} style={styles.duePaymentCard}>
        <View style={styles.duePaymentHeader}>
          <View>
            <Text style={styles.duePaymentCompany}>Delhi Fashion Hub</Text>
            <Text style={styles.duePaymentOverdue}>2 days overdue</Text>
          </View>
          <View style={styles.duePaymentRight}>
            <Text style={styles.duePaymentAmount}>‚Çπ45,200</Text>
            <Text style={styles.duePaymentPenalty}>+‚Çπ904 penalty</Text>
          </View>
        </View>
        <TouchableOpacity style={styles.sendReminderButton}>
          <Text style={styles.sendReminderButtonText}>üì± Send Reminder</Text>
        </TouchableOpacity>
      </LinearGradient>
    </ScrollView>
    <View style={styles.duePaymentTotal}>
      <View style={styles.duePaymentTotalRow}>
        <Text style={styles.duePaymentTotalLabel}>Total Due + Penalty:</Text>
        <Text style={styles.duePaymentTotalAmount}>‚Çπ2,57,500</Text>
      </View>
      <TouchableOpacity style={styles.closePanelButton} onPress={onClose}>
        <Text style={styles.closePanelButtonText}>Close Panel</Text>
      </TouchableOpacity>
    </View>
  </View>
);

const PaymentReminderModal = ({ onClose }) => (
  <View style={styles.modalContainer}>
    <View style={styles.successIndicator}>
      <Icon name="send" size={80} color="#3B82F6" />
    </View>
    <Text style={styles.modalTitle}>üì± Reminder Sent Successfully!</Text>
    <View style={styles.reminderDetails}>
      <Text style={styles.reminderDetailsTitle}>Payment reminder has been sent via:</Text>
      <View style={styles.reminderMethod}>
        <Icon name="check" size={16} color="#10B981" />
        <Text style={styles.reminderMethodText}>SMS Message</Text>
      </View>
      <View style={styles.reminderMethod}>
        <Icon name="check" size={16} color="#10B981" />
        <Text style={styles.reminderMethodText}>WhatsApp Message</Text>
      </View>
      <View style={styles.reminderMethod}>
        <Icon name="check" size={16} color="#10B981" />
        <Text style={styles.reminderMethodText}>Email Notification</Text>
      </View>
    </View>
    <TouchableOpacity style={styles.perfectButton} onPress={onClose}>
      <Text style={styles.perfectButtonText}>Perfect!</Text>
    </TouchableOpacity>
  </View>
);

const AddPartyModal = ({ onClose }) => (
  <View style={styles.modalContainer}>
    <Text style={styles.modalTitle}>‚ûï Add New Party</Text>
    <ScrollView style={styles.addPartyForm}>
      <View style={styles.formGroup}>
        <Text style={styles.formLabel}>Party Name *</Text>
        <TextInput
          style={styles.formInput}
          placeholder="Enter party name"
          placeholderTextColor="#9CA3AF"
        />
      </View>
      <View style={styles.formGroup}>
        <Text style={styles.formLabel}>GST Number *</Text>
        <TextInput
          style={styles.formInput}
          placeholder="24ABCDE1234F1Z5"
          placeholderTextColor="#9CA3AF"
        />
      </View>
      <View style={styles.formGroup}>
        <Text style={styles.formLabel}>Location *</Text>
        <TextInput
          style={styles.formInput}
          placeholder="City, State"
          placeholderTextColor="#9CA3AF"
        />
      </View>
      <View style={styles.formGroup}>
        <Text style={styles.formLabel}>Credit Limit</Text>
        <TextInput
          style={styles.formInput}
          placeholder="Enter amount"
          placeholderTextColor="#9CA3AF"
          keyboardType="numeric"
        />
      </View>
      <View style={styles.autoIdContainer}>
        <Text style={styles.autoIdLabel}>üÜî Auto-Generated Party ID</Text>
        <Text style={styles.autoIdValue}>PTY-004</Text>
      </View>
    </ScrollView>
    <View style={styles.modalButtons}>
      <TouchableOpacity style={styles.cancelButton} onPress={onClose}>
        <Text style={styles.cancelButtonText}>Cancel</Text>
      </TouchableOpacity>
      <TouchableOpacity style={styles.savePartyButton}>
        <Text style={styles.savePartyButtonText}>Save Party</Text>
      </TouchableOpacity>
    </View>
  </View>
);

const BillSortingModal = ({ onClose }) => (
  <View style={styles.modalContainer}>
    <Text style={styles.modalTitle}>üìä Bill Sorting Options</Text>
    <View style={styles.sortingOptions}>
      <TouchableOpacity style={styles.sortingOption}>
        <LinearGradient colors={['#3B82F6', '#6366F1']} style={styles.sortingOptionGradient}>
          <Text style={styles.sortingOptionTitle}>üí∞ Amount - Ascending</Text>
          <Text style={styles.sortingOptionSubtitle}>Sort from lowest to highest amount</Text>
        </LinearGradient>
      </TouchableOpacity>
      <TouchableOpacity style={styles.sortingOption}>
        <LinearGradient colors={['#6366F1', '#8B5CF6']} style={styles.sortingOptionGradient}>
          <Text style={styles.sortingOptionTitle}>üí∞ Amount - Descending</Text>
          <Text style={styles.sortingOptionSubtitle}>Sort from highest to lowest amount</Text>
        </LinearGradient>
      </TouchableOpacity>
      <TouchableOpacity style={styles.sortingOption}>
        <LinearGradient colors={['#10B981', '#059669']} style={styles.sortingOptionGradient}>
          <Text style={styles.sortingOptionTitle}>üìÖ Date - Ascending</Text>
          <Text style={styles.sortingOptionSubtitle}>Sort from oldest to newest bills</Text>
        </LinearGradient>
      </TouchableOpacity>
      <TouchableOpacity style={styles.sortingOption}>
        <LinearGradient colors={['#059669', '#0D9488']} style={styles.sortingOptionGradient}>
          <Text style={styles.sortingOptionTitle}>üìÖ Date - Descending</Text>
          <Text style={styles.sortingOptionSubtitle}>Sort from newest to oldest bills</Text>
        </LinearGradient>
      </TouchableOpacity>
    </View>
    <TouchableOpacity style={styles.cancelSortButton} onPress={onClose}>
      <Text style={styles.cancelSortButtonText}>Cancel</Text>
    </TouchableOpacity>
  </View>
);

const GSTFileModal = ({ onClose }) => (
  <View style={styles.modalContainer}>
    <View style={styles.successIndicator}>
      <Icon name="description" size={80} color="#10B981" />
    </View>
    <Text style={styles.modalTitle}>üìÑ GST File Created Successfully!</Text>
    <View style={styles.fileDetails}>
      <View style={styles.fileDetailRow}>
        <Text style={styles.fileDetailLabel}>File Name:</Text>
        <Text style={styles.fileDetailValue}>GST_Annual_2023.xlsx</Text>
      </View>
      <View style={styles.fileDetailRow}>
        <Text style={styles.fileDetailLabel}>File Size:</Text>
        <Text style={styles.fileDetailValue}>2.4 MB</Text>
      </View>
      <View style={styles.fileDetailRow}>
        <Text style={styles.fileDetailLabel}>Total Records:</Text>
        <Text style={styles.fileDetailValueHighlight}>1,247 transactions</Text>
      </View>
      <View style={styles.fileDetailRow}>
        <Text style={styles.fileDetailLabel}>Created:</Text>
        <Text style={styles.fileDetailValue}>{new Date().toLocaleDateString()}</Text>
      </View>
    </View>
    <View style={styles.modalButtons}>
      <TouchableOpacity style={styles.closeFileButton} onPress={onClose}>
        <Text style={styles.closeFileButtonText}>Close</Text>
      </TouchableOpacity>
      <TouchableOpacity style={styles.downloadButton}>
        <Text style={styles.downloadButtonText}>üì• Download</Text>
      </TouchableOpacity>
    </View>
  </View>
);

const TransporterBookingModal = ({ onClose }) => (
  <View style={styles.modalContainer}>
    <Text style={styles.modalTitle}>üöõ Book Transporter</Text>
    <ScrollView style={styles.bookingForm}>
      <View style={styles.formGroup}>
        <Text style={styles.formLabel}>From Location</Text>
        <TextInput
          style={styles.formInputDisabled}
          value="Mumbai, Maharashtra"
          editable={false}
        />
      </View>
      <View style={styles.formGroup}>
        <Text style={styles.formLabel}>To Location</Text>
        <TextInput
          style={styles.formInput}
          placeholder="Enter destination city"
          placeholderTextColor="#9CA3AF"
        />
      </View>
      <View style={styles.formGroup}>
        <Text style={styles.formLabel}>Load Weight</Text>
        <TextInput
          style={styles.formInput}
          placeholder="Select weight range"
          placeholderTextColor="#9CA3AF"
        />
      </View>
      <View style={styles.formGroup}>
        <Text style={styles.formLabel}>Pickup Date</Text>
        <TextInput
          style={styles.formInput}
          placeholder="Select date"
          placeholderTextColor="#9CA3AF"
        />
      </View>
      <LinearGradient colors={['#3B82F6', '#6366F1']} style={styles.costEstimate}>
        <Text style={styles.costEstimateLabel}>üí∞ Estimated Cost</Text>
        <Text style={styles.costEstimateAmount}>‚Çπ8,500 - ‚Çπ12,000</Text>
        <Text style={styles.costEstimateDetails}>Based on distance and load weight</Text>
      </LinearGradient>
    </ScrollView>
    <View style={styles.modalButtons}>
      <TouchableOpacity style={styles.cancelBookingButton} onPress={onClose}>
        <Text style={styles.cancelBookingButtonText}>Cancel</Text>
      </TouchableOpacity>
      <TouchableOpacity style={styles.bookNowButton}>
        <Text style={styles.bookNowButtonText}>üöõ Book Now</Text>
      </TouchableOpacity>
    </View>
  </View>
);

const AttendanceModal = ({ staff, onClose }) => (
  <View style={styles.modalContainer}>
    <Text style={styles.modalTitle}>‚úì Mark Today's Attendance</Text>
    <ScrollView style={styles.attendanceList}>
      {staff.map((worker) => (
        <View key={worker.id} style={styles.attendanceItem}>
          <View>
            <Text style={styles.attendanceWorkerName}>{worker.name}</Text>
            <Text style={styles.attendanceWorkerRole}>
              {worker.role} {worker.machine ? `- ${worker.machine}` : ''}
            </Text>
          </View>
          <View style={styles.attendanceButtons}>
            <TouchableOpacity style={styles.presentButton}>
              <Text style={styles.presentButtonText}>‚úì Present</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.absentButton}>
              <Text style={styles.absentButtonText}>‚úó Absent</Text>
            </TouchableOpacity>
          </View>
        </View>
      ))}
    </ScrollView>
    <TouchableOpacity style={styles.saveAttendanceButton}>
      <Text style={styles.saveAttendanceButtonText}>üíæ Save All Attendance</Text>
    </TouchableOpacity>
  </View>
);

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F3F4F6',
  },
  header: {
    paddingHorizontal: 20,
    paddingVertical: 20,
    paddingTop: 40,
  },
  headerTop: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 20,
  },
  headerTitle: {
    fontSize: 28,
    fontWeight: 'bold',
    color: 'white',
  },
  headerSubtitle: {
    fontSize: 14,
    color: 'rgba(255, 255, 255, 0.8)',
  },
  headerRight: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 15,
  },
  notificationDot: {
    position: 'absolute',
    top: -2,
    right: -2,
    width: 8,
    height: 8,
    backgroundColor: '#EF4444',
    borderRadius: 4,
  },
  avatar: {
    width: 40,
    height: 40,
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center',
  },
  avatarText: {
    color: 'white',
    fontSize: 18,
    fontWeight: 'bold',
  },
  quickActions: {
    flexDirection: 'row',
    gap: 12,
    marginBottom: 20,
  },
  voiceButton: {
    flex: 1,
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    borderRadius: 16,
    padding: 16,
    alignItems: 'center',
    gap: 8,
  },
  aiButton: {
    flex: 1,
    backgroundColor: '#F59E0B',
    borderRadius: 16,
    padding: 16,
    alignItems: 'center',
    gap: 8,
  },
  aiEmoji: {
    fontSize: 32,
  },
  quickActionText: {
    color: 'white',
    fontSize: 14,
    fontWeight: '600',
  },
  statsContainer: {
    flexDirection: 'row',
    gap: 12,
  },
  statCard: {
    flex: 1,
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    borderRadius: 12,
    padding: 12,
    alignItems: 'center',
  },
  statValue: {
    fontSize: 20,
    fontWeight: 'bold',
    color: 'white',
  },
  statLabel: {
    fontSize: 12,
    color: 'rgba(255, 255, 255, 0.8)',
  },
  tabBar: {
    flexDirection: 'row',
    backgroundColor: 'white',
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB',
  },
  tabButton: {
    flex: 1,
    paddingVertical: 16,
    paddingHorizontal: 8,
    alignItems: 'center',
  },
  activeTab: {
    borderBottomWidth: 2,
    borderBottomColor: '#6366F1',
  },
  tabText: {
    fontSize: 12,
    fontWeight: '600',
    color: '#6B7280',
    textAlign: 'center',
  },
  activeTabText: {
    color: '#6366F1',
  },
  content: {
    flex: 1,
  },
  tabContent: {
    flex: 1,
    padding: 16,
    paddingBottom: 100,
  },
  alertCard: {
    borderRadius: 16,
    padding: 20,
    marginBottom: 24,
  },
  alertHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  alertTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: 'white',
  },
  alertBadge: {
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    paddingHorizontal: 12,
    paddingVertical: 4,
    borderRadius: 20,
  },
  alertBadgeText: {
    color: 'white',
    fontSize: 14,
    fontWeight: '600',
  },
  alertSubtext: {
    color: 'rgba(255, 255, 255, 0.9)',
    fontSize: 14,
    marginBottom: 12,
  },
  alertButton: {
    backgroundColor: 'white',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 12,
    alignSelf: 'flex-start',
  },
  alertButtonText: {
    color: '#EF4444',
    fontWeight: '600',
  },
  sectionHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#1F2937',
  },
  sortButton: {
    backgroundColor: '#DBEAFE',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 12,
  },
  sortButtonText: {
    color: '#2563EB',
    fontSize: 14,
    fontWeight: '600',
  },
  transactionCard: {
    backgroundColor: 'white',
    borderRadius: 16,
    padding: 16,
    marginBottom: 16,
    borderLeftWidth: 4,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  transactionHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 12,
  },
  transactionCompany: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#1F2937',
  },
  transactionDetails: {
    fontSize: 14,
    color: '#6B7280',
  },
  transactionRight: {
    alignItems: 'flex-end',
  },
  transactionAmount: {
    fontSize: 20,
    fontWeight: 'bold',
  },
  statusBadge: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 20,
    marginTop: 4,
  },
  statusBadgeText: {
    fontSize: 12,
    fontWeight: '600',
  },
  transactionFooter: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  transactionPaymentMethod: {
    fontSize: 14,
    color: '#6B7280',
  },
  reminderButton: {
    backgroundColor: '#EF4444',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 12,
  },
  reminderButtonText: {
    color: 'white',
    fontSize: 14,
    fontWeight: '600',
  },
  payButton: {
    backgroundColor: '#6366F1',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 12,
  },
  payButtonText: {
    color: 'white',
    fontSize: 14,
    fontWeight: '600',
  },
  viewProofText: {
    color: '#6366F1',
    fontSize: 14,
    fontWeight: '600',
  },
  addButton: {
    backgroundColor: '#6366F1',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 12,
  },
  addButtonText: {
    color: 'white',
    fontWeight: '600',
  },
  searchContainer: {
    position: 'relative',
    marginBottom: 24,
  },
  searchIcon: {
    position: 'absolute',
    left: 12,
    top: 12,
    zIndex: 1,
  },
  searchInput: {
    backgroundColor: '#F3F4F6',
    borderRadius: 16,
    paddingHorizontal: 16,
    paddingVertical: 12,
    paddingLeft: 40,
    fontSize: 16,
    color: '#1F2937',
  },
  partyCard: {
    backgroundColor: 'white',
    borderRadius: 16,
    padding: 16,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  partyHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 12,
  },
  partyName: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#1F2937',
  },
  partyDetails: {
    fontSize: 14,
    color: '#6B7280',
  },
  partyGST: {
    fontSize: 12,
    color: '#6B7280',
  },
  partyRight: {
    alignItems: 'flex-end',
  },
  partyAmount: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#10B981',
  },
  partyAmountLabel: {
    fontSize: 12,
    color: '#6B7280',
  },
  partyStatusBadge: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 20,
    marginTop: 4,
  },
  partyStatusText: {
    fontSize: 12,
    fontWeight: '600',
  },
  partyActions: {
    flexDirection: 'row',
    gap: 8,
  },
  partyActionButton: {
    flex: 1,
    backgroundColor: '#EEF2FF',
    paddingVertical: 8,
    borderRadius: 12,
    alignItems: 'center',
  },
  partyActionButtonText: {
    color: '#6366F1',
    fontSize: 14,
    fontWeight: '600',
  },
  partyContactButton: {
    backgroundColor: '#F0FDF4',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 12,
  },
  partyContactButtonText: {
    fontSize: 14,
  },
  gstButton: {
    backgroundColor: '#10B981',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 12,
  },
  gstButtonText: {
    color: 'white',
    fontWeight: '600',
  },
  gstSearchContainer: {
    flexDirection: 'row',
    gap: 12,
    marginBottom: 24,
  },
  gstSearchInput: {
    flex: 1,
    backgroundColor: '#F3F4F6',
    borderRadius: 16,
    paddingHorizontal: 16,
    paddingVertical: 12,
    fontSize: 16,
    color: '#1F2937',
  },
  gstSearchButton: {
    backgroundColor: '#6366F1',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 16,
    justifyContent: 'center',
  },
  gstSearchButtonText: {
    color: 'white',
    fontWeight: '600',
  },
  gstActionsContainer: {
    flexDirection: 'row',
    gap: 16,
    marginBottom: 24,
  },
  gstActionCard: {
    flex: 1,
    backgroundColor: '#3B82F6',
    borderRadius: 16,
    padding: 24,
    alignItems: 'center',
  },
  gstActionEmoji: {
    fontSize: 48,
    marginBottom: 8,
  },
  gstActionTitle: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 4,
  },
  gstActionSubtitle: {
    color: 'rgba(255, 255, 255, 0.9)',
    fontSize: 14,
    textAlign: 'center',
  },
  gstStatusCard: {
    backgroundColor: 'white',
    borderRadius: 16,
    padding: 16,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  gstStatusHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  gstStatusTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#1F2937',
  },
  gstStatusPeriod: {
    fontSize: 14,
    color: '#6B7280',
  },
  gstStatusBadge: {
    paddingHorizontal: 12,
    paddingVertical: 4,
    borderRadius: 20,
  },
  gstStatusBadgeText: {
    fontSize: 14,
    fontWeight: '600',
  },
  gstStatusRight: {
    alignItems: 'flex-end',
  },
  gstStatusAmount: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#3B82F6',
  },
  gstStatusAmountLabel: {
    fontSize: 12,
    color: '#6B7280',
  },
  gstStatusDetails: {
    fontSize: 14,
    color: '#6B7280',
    marginBottom: 12,
  },
  gstStatusButton: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 12,
    alignSelf: 'flex-start',
  },
  gstStatusButtonText: {
    color: 'white',
    fontSize: 14,
    fontWeight: '600',
  },
  attendanceButton: {
    backgroundColor: '#10B981',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 12,
  },
  attendanceButtonText: {
    color: 'white',
    fontWeight: '600',
  },
  summaryCard: {
    borderRadius: 16,
    padding: 24,
    marginBottom: 24,
  },
  summaryTitle: {
    color: 'white',
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 16,
  },
  summaryStats: {
    flexDirection: 'row',
    justifyContent: 'space-around',
  },
  summaryStatItem: {
    alignItems: 'center',
  },
  summaryStatValue: {
    color: 'white',
    fontSize: 32,
    fontWeight: 'bold',
  },
  summaryStatLabel: {
    color: 'rgba(255, 255, 255, 0.9)',
    fontSize: 14,
  },
  subsectionTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#1F2937',
    marginBottom: 16,
  },
  staffCard: {
    backgroundColor: 'white',
    borderRadius: 16,
    padding: 16,
    marginBottom: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  staffHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 12,
  },
  staffName: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#1F2937',
  },
  staffDetails: {
    fontSize: 14,
    color: '#6B7280',
  },
  staffRight: {
    alignItems: 'flex-end',
  },
  staffEarnings: {
    fontSize: 18,
    fontWeight: 'bold',
  },
  staffRate: {
    fontSize: 12,
    color: '#6B7280',
  },
  staffFooter: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  staffStatusBadge: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 20,
  },
  staffStatusText: {
    fontSize: 12,
    fontWeight: '600',
  },
  viewDetailsText: {
    color: '#6366F1',
    fontSize: 14,
    fontWeight: '600',
  },
  viewAllButton: {
    backgroundColor: '#DBEAFE',
    paddingVertical: 12,
    borderRadius: 16,
    alignItems: 'center',
    marginBottom: 24,
  },
  viewAllButtonText: {
    color: '#2563EB',
    fontWeight: '600',
  },
  moreCard: {
    backgroundColor: 'white',
    borderRadius: 16,
    padding: 16,
    marginBottom: 24,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  moreCardTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#1F2937',
    marginBottom: 16,
  },
  moreCardContent: {
    gap: 12,
  },
  moreFeatureItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    backgroundColor: '#F9FAFB',
    padding: 12,
    borderRadius: 12,
  },
  moreFeatureTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1F2937',
  },
  moreFeatureSubtitle: {
    fontSize: 14,
    color: '#6B7280',
  },
  moreFeatureButton: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 12,
  },
  moreFeatureButtonText: {
    color: 'white',
    fontSize: 14,
    fontWeight: '600',
  },
  aiCard: {
    borderRadius: 16,
    padding: 24,
    marginBottom: 24,
  },
  aiCardTitle: {
    color: 'white',
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 16,
  },
  aiFeatureButton: {
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    borderRadius: 16,
    padding: 16,
    marginBottom: 12,
  },
  aiFeatureTitle: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 4,
  },
  aiFeatureSubtitle: {
    color: 'rgba(255, 255, 255, 0.9)',
    fontSize: 14,
  },
  toolsGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 16,
  },
  toolCard: {
    backgroundColor: 'white',
    borderRadius: 16,
    padding: 16,
    alignItems: 'center',
    width: (width - 48) / 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  toolIcon: {
    fontSize: 32,
    marginBottom: 8,
  },
  toolTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#1F2937',
    marginBottom: 4,
  },
  toolSubtitle: {
    fontSize: 14,
    color: '#6B7280',
    textAlign: 'center',
  },
  floatingVoiceButton: {
    position: 'absolute',
    bottom: 120,
    right: 20,
    width: 64,
    height: 64,
    borderRadius: 32,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 8,
  },
  floatingVoiceGradient: {
    width: 64,
    height: 64,
    borderRadius: 32,
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
    padding: 16,
  },
  modalContent: {
    backgroundColor: 'white',
    borderRadius: 24,
    maxWidth: width - 32,
    width: '100%',
    maxHeight: height * 0.8,
  },
  modalContainer: {
    padding: 24,
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#1F2937',
    textAlign: 'center',
    marginBottom: 24,
  },
  modalSubtitle: {
    fontSize: 16,
    color: '#6B7280',
    textAlign: 'center',
    marginBottom: 24,
  },
  boldText: {
    fontWeight: 'bold',
  },
  voiceRecordingIndicator: {
    alignItems: 'center',
    marginBottom: 24,
  },
  voiceRecordingCircle: {
    width: 96,
    height: 96,
    borderRadius: 48,
    justifyContent: 'center',
    alignItems: 'center',
  },
  voiceTextContainer: {
    backgroundColor: '#F3F4F6',
    borderRadius: 16,
    padding: 16,
    marginBottom: 24,
  },
  voiceText: {
    fontSize: 14,
    color: '#6B7280',
    fontStyle: 'italic',
    textAlign: 'center',
  },
  modalButtons: {
    flexDirection: 'row',
    gap: 12,
  },
  stopButton: {
    flex: 1,
    backgroundColor: '#EF4444',
    paddingVertical: 12,
    borderRadius: 16,
    alignItems: 'center',
  },
  stopButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  processButton: {
    flex: 1,
    backgroundColor: '#10B981',
    paddingVertical: 12,
    borderRadius: 16,
    alignItems: 'center',
  },
  processButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  successIndicator: {
    alignItems: 'center',
    marginBottom: 24,
  },
  orderDetails: {
    backgroundColor: '#F0FDF4',
    borderRadius: 16,
    padding: 24,
    marginBottom: 24,
  },
  orderDetailRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  orderDetailLabel: {
    fontSize: 16,
    color: '#6B7280',
    fontWeight: '600',
  },
  orderDetailValue: {
    fontSize: 16,
    color: '#1F2937',
    fontWeight: 'bold',
  },
  orderDetailValueHighlight: {
    fontSize: 16,
    color: '#6366F1',
    fontWeight: 'bold',
  },
  confirmButton: {
    backgroundColor: '#6366F1',
    paddingVertical: 12,
    borderRadius: 16,
    alignItems: 'center',
  },
  confirmButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  predictionsContainer: {
    maxHeight: 400,
  },
  predictionCard: {
    borderRadius: 16,
    padding: 16,
    marginBottom: 16,
  },
  predictionHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  predictionTitle: {
    color: 'white',
    fontSize: 18,
    fontWeight: 'bold',
  },
  predictionBadge: {
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    paddingHorizontal: 12,
    paddingVertical: 4,
    borderRadius: 20,
  },
  predictionBadgeText: {
    color: 'white',
    fontSize: 14,
    fontWeight: 'bold',
  },
  predictionText: {
    color: 'rgba(255, 255, 255, 0.9)',
    fontSize: 14,
    marginBottom: 8,
  },
  predictionRecommendation: {
    color: 'rgba(255, 255, 255, 0.75)',
    fontSize: 12,
  },
  gotItButton: {
    backgroundColor: '#8B5CF6',
    paddingVertical: 12,
    borderRadius: 16,
    alignItems: 'center',
    marginTop: 16,
  },
  gotItButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  duePaymentsContainer: {
    maxHeight: 300,
  },
  duePaymentCard: {
    borderRadius: 16,
    padding: 16,
    marginBottom: 16,
  },
  duePaymentHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 12,
  },
  duePaymentCompany: {
    color: 'white',
    fontSize: 18,
    fontWeight: 'bold',
  },
  duePaymentOverdue: {
    color: 'rgba(255, 255, 255, 0.9)',
    fontSize: 14,
  },
  duePaymentRight: {
    alignItems: 'flex-end',
  },
  duePaymentAmount: {
    color: 'white',
    fontSize: 20,
    fontWeight: 'bold',
  },
  duePaymentPenalty: {
    color: 'rgba(255, 255, 255, 0.9)',
    fontSize: 14,
  },
  sendReminderButton: {
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    paddingVertical: 8,
    borderRadius: 12,
    alignItems: 'center',
  },
  sendReminderButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  duePaymentTotal: {
    borderTopWidth: 2,
    borderTopColor: '#E5E7EB',
    paddingTop: 16,
    marginTop: 16,
  },
  duePaymentTotalRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  duePaymentTotalLabel: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#1F2937',
  },
  duePaymentTotalAmount: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#EF4444',
  },
  closePanelButton: {
    backgroundColor: '#6B7280',
    paddingVertical: 12,
    borderRadius: 16,
    alignItems: 'center',
  },
  closePanelButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  reminderDetails: {
    backgroundColor: '#DBEAFE',
    borderRadius: 16,
    padding: 24,
    marginBottom: 24,
  },
  reminderDetailsTitle: {
    color: '#1E40AF',
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 12,
  },
  reminderMethod: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
    marginBottom: 8,
  },
  reminderMethodText: {
    fontSize: 14,
    color: '#1F2937',
  },
  perfectButton: {
    backgroundColor: '#3B82F6',
    paddingVertical: 12,
    borderRadius: 16,
    alignItems: 'center',
  },
  perfectButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  addPartyForm: {
    maxHeight: 400,
  },
  formGroup: {
    marginBottom: 16,
  },
  formLabel: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#374151',
    marginBottom: 8,
  },
  formInput: {
    borderWidth: 2,
    borderColor: '#D1D5DB',
    borderRadius: 16,
    paddingHorizontal: 16,
    paddingVertical: 12,
    fontSize: 16,
    color: '#1F2937',
  },
  formInputDisabled: {
    borderWidth: 2,
    borderColor: '#D1D5DB',
    borderRadius: 16,
    paddingHorizontal: 16,
    paddingVertical: 12,
    fontSize: 16,
    color: '#6B7280',
    backgroundColor: '#F9FAFB',
  },
  autoIdContainer: {
    backgroundColor: '#DBEAFE',
    borderRadius: 16,
    padding: 16,
    borderWidth: 2,
    borderColor: '#93C5FD',
    alignItems: 'center',
  },
  autoIdLabel: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#1E40AF',
  },
  autoIdValue: {
    fontSize: 32,
    fontWeight: 'bold',
    color: '#2563EB',
  },
  cancelButton: {
    flex: 1,
    backgroundColor: '#E5E7EB',
    paddingVertical: 12,
    borderRadius: 16,
    alignItems: 'center',
  },
  cancelButtonText: {
    color: '#1F2937',
    fontSize: 16,
    fontWeight: 'bold',
  },
  savePartyButton: {
    flex: 1,
    backgroundColor: '#6366F1',
    paddingVertical: 12,
    borderRadius: 16,
    alignItems: 'center',
  },
  savePartyButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  sortingOptions: {
    gap: 12,
    marginBottom: 24,
  },
  sortingOption: {
    borderRadius: 16,
    overflow: 'hidden',
  },
  sortingOptionGradient: {
    padding: 16,
  },
  sortingOptionTitle: {
    color: 'white',
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 4,
  },
  sortingOptionSubtitle: {
    color: 'rgba(255, 255, 255, 0.9)',
    fontSize: 14,
  },
  cancelSortButton: {
    backgroundColor: '#E5E7EB',
    paddingVertical: 12,
    borderRadius: 16,
    alignItems: 'center',
  },
  cancelSortButtonText: {
    color: '#1F2937',
    fontSize: 16,
    fontWeight: 'bold',
  },
  fileDetails: {
    backgroundColor: '#F0FDF4',
    borderRadius: 16,
    padding: 24,
    marginBottom: 24,
  },
  fileDetailRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  fileDetailLabel: {
    fontSize: 16,
    color: '#6B7280',
    fontWeight: '600',
  },
  fileDetailValue: {
    fontSize: 16,
    color: '#1F2937',
    fontWeight: 'bold',
  },
  fileDetailValueHighlight: {
    fontSize: 16,
    color: '#6366F1',
    fontWeight: 'bold',
  },
  closeFileButton: {
    flex: 1,
    backgroundColor: '#E5E7EB',
    paddingVertical: 12,
    borderRadius: 16,
    alignItems: 'center',
  },
  closeFileButtonText: {
    color: '#1F2937',
    fontSize: 16,
    fontWeight: 'bold',
  },
  downloadButton: {
    flex: 1,
    backgroundColor: '#10B981',
    paddingVertical: 12,
    borderRadius: 16,
    alignItems: 'center',
  },
  downloadButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  bookingForm: {
    maxHeight: 400,
  },
  costEstimate: {
    borderRadius: 16,
    padding: 16,
    alignItems: 'center',
    marginTop: 16,
  },
  costEstimateLabel: {
    color: 'white',
    fontSize: 14,
    fontWeight: 'bold',
    marginBottom: 8,
  },
  costEstimateAmount: {
    color: 'white',
    fontSize: 32,
    fontWeight: 'bold',
    marginBottom: 4,
  },
  costEstimateDetails: {
    color: 'rgba(255, 255, 255, 0.9)',
    fontSize: 14,
  },
  cancelBookingButton: {
    flex: 1,
    backgroundColor: '#E5E7EB',
    paddingVertical: 12,
    borderRadius: 16,
    alignItems: 'center',
  },
  cancelBookingButtonText: {
    color: '#1F2937',
    fontSize: 16,
    fontWeight: 'bold',
  },
  bookNowButton: {
    flex: 1,
    backgroundColor: '#10B981',
    paddingVertical: 12,
    borderRadius: 16,
    alignItems: 'center',
  },
  bookNowButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  attendanceList: {
    maxHeight: 300,
  },
  attendanceItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    backgroundColor: '#F9FAFB',
    padding: 16,
    borderRadius: 16,
    marginBottom: 12,
  },
  attendanceWorkerName: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#1F2937',
  },
  attendanceWorkerRole: {
    fontSize: 14,
    color: '#6B7280',
  },
  attendanceButtons: {
    flexDirection: 'row',
    gap: 8,
  },
  presentButton: {
    backgroundColor: '#10B981',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 12,
  },
  presentButtonText: {
    color: 'white',
    fontSize: 14,
    fontWeight: 'bold',
  },
  absentButton: {
    backgroundColor: '#EF4444',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 12,
  },
  absentButtonText: {
    color: 'white',
    fontSize: 14,
    fontWeight: 'bold',
  },
  saveAttendanceButton: {
    backgroundColor: '#6366F1',
    paddingVertical: 12,
    borderRadius: 16,
    alignItems: 'center',
    marginTop: 24,
  },
  saveAttendanceButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
});

export default TexPortApp;